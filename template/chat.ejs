<% layout('/layout/page') -%> <% block('title', "Чат") -%>

<script src="/vendor/bower_components/socket.io-client/dist/socket.io.js"></script>

<div id="room">
  <form>
    <input
      class="form-control"
      autocomplete="off"
      autofocus
      placeholder="Сообщение..."
    />
  </form>
  <ul class="chat-out"></ul>
</div>

<script>
  const input = $("#room input");
  const ul = $("#room ul");
  const form = $("#room form");

  const socket = io({
    path: "/chat",
    reconnection: true,
  });

  socket
    .on("message", function (username, message) {
      printMessage(username + "> " + message);
    })
    .on("leave", function (username) {
      printStatus(username + " вышел из чата");
    })
    .on("join", function (username) {
      printStatus(username + " вошёл в чат");
    })
    .on("connect", function () {
      printStatus("соединение установлено");
      form.on("submit", sendMessage);
      input.prop("disabled", false);
    })
    .on("disconnect", function () {
      printStatus("соединение потеряно");
      form.off("submit", sendMessage);
      input.prop("disabled", true);
      this.$emit("error");
    })
    .on("logout", function () {
      location.href = "/";
    })
    .on("error", function (reason) {
      if (reason == "handshake unauthorized") {
        printStatus("вы вышли из сайта");
      } else {
        setTimeout(function () {
          socket.socket.connect();
        }, 500);
      }
    });

  function sendMessage() {
    const text = input.val();
    socket.emit("message", text, function () {
      printMessage(text);
    });
    input.val("");
    return false;
  }
  function reconnect() {
    socket.once("error", function () {
      setTimeout(reconnect, 500);
    });
    socket.socket.connect();
  }
  function printStatus(status) {
    $("<li>").append($("<i>").text(status)).appendTo(ul);
  }
  function printMessage(text) {
    $("<li>").text(text).appendTo(ul);
  }
</script>
